homeassistant:
  # Name of the location where Home Assistant is running
  name: Dacha
  # Location required to calculate the time the sun rises and sets
  latitude: !secret latitude
  longitude: !secret longitude
  # Impacts weather/sunrise data (altitude above sea level in meters)
  elevation: !secret elevation
  # metric for Metric, imperial for Imperial
  unit_system: metric
  # Pick yours from here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: !secret time_zone
  # Customization file
  customize: !include customize.yaml

# Enables the frontend
frontend:

# https://www.home-assistant.io/lovelace/yaml-mode/
lovelace:
  mode: yaml

# Enables configuration UI
config:

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
# http:
#   base_url: example.duckdns.org:8123

# Checks for available updates
# Note: This component will send some information about your system to
# the developers to assist with development of Home Assistant.
# For more information, please see:
# https://home-assistant.io/blog/2016/10/25/explaining-the-updater/
updater:
  # Optional, allows Home Assistant developers to focus on popular components.
  # include_used_components: true

# Discover some devices automatically
discovery:

# Allows you to issue voice commands from the frontend in enabled browsers
conversation:

# Enables support for tracking state changes over time
history:

# View all events in a logbook
logbook:

# Enables a map showing the location of tracked devices
map:

# Track the sun
sun:

# Weather prediction
sensor weather:
  - platform: yr

# Text to speech
tts:
  - platform: google

# Cloud
cloud:

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml

# Camera
camera cam1:
  platform: mjpeg
  mjpeg_url: http://localhost:8081

binary_sensor:
  # The well stub
  - platform: template
    sensors:
      well:
        value_template: "{{ is_state('input_boolean.well_stub', 'on') }}"
        entity_id: input_boolean.well_stub
        # On = full, off = not full.
        device_class: moisture
  # The tank stub
  - platform: template
    sensors:
      tank:
        value_template: "{{ is_state('input_boolean.tank_stub', 'on') }}"
        entity_id: input_boolean.tank_stub
        # On = full, off = not full.
        device_class: moisture
  # To display the pump state without making it possible to change it.
  - platform: template
    sensors:
      pump_state:
        value_template: "{{ is_state('switch.pump', 'on') }}" # TODO Can't it be like `states.switch.pump.state` ?
        entity_id: switch.pump
        device_class: plug
        icon_template: >-
          {% if is_state('switch.pump', 'on') %}
            mdi:engine
          {% else %}
            mdi:engine-off
          {% endif %}

switch:
  # TODO You can then leave it as a wrapper or replace it with a real one.
  - platform: template
    switches:
      pump:
        value_template: "{{ states('input_boolean.pump_stub') }}"
        entity_id: input_boolean.pump_stub # It won't work. Apparently,
        # templates do not generate state changes Bug?
        turn_on:
          # TODO
          service: input_boolean.turn_on
          entity_id: input_boolean.pump_stub
        turn_off:
          # TODO
          service: input_boolean.turn_off
          entity_id: input_boolean.pump_stub
      # `group.automation_pump_off_when_no_water` wrapper
  - platform: template
    switches:
      automation_pump_off_when_no_water:
        value_template: "{{ states('group.automation_pump_off_when_no_water') }}"
        entity_id: group.automation_pump_off_when_no_water
        turn_on:
          service: homeassistant.turn_on
          entity_id: group.automation_pump_off_when_no_water
        turn_off:
          service: homeassistant.turn_off
          entity_id: group.automation_pump_off_when_no_water
        icon_template: mdi:settings-box

input_boolean:
  pump_desired_state:
  # TODO remove these when you have the actual sensors/switches.
  pump_stub:
  well_stub:
  tank_stub:

